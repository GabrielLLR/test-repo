name: Validate PR and Create Jira Task

on:
  pull_request:
    types:
      - opened
      - synchronize  # Executa tamb√©m quando o PR √© atualizado

jobs:
  validate-and-jira:
    if: github.repository != 'GabrielLLR/template-repo'  # EVITA EXECU√á√ÉO NO TEMPLATE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo do PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}  # Pega a vers√£o exata do PR
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Garantir que todos os arquivos do PR foram baixados
        run: git pull origin ${{ github.event.pull_request.head.ref }}

      - name: Debug - Listar Arquivos no Diret√≥rio
        run: ls -R

      - name: Debug - Exibir Caminho Completo do `swagger.yaml`
        run: |
          echo "Listando arquivos no diret√≥rio atual:"
          ls -lah
          echo "Procurando por swagger.yaml:"
          find $(pwd) -name "swagger.yaml"

      - name: Garantir Permiss√µes de Leitura no `swagger.yaml`
        run: chmod +r swagger.yaml || true

      - name: Criar `validate.go` na raiz
        run: |
          echo 'package main

          import (
              "fmt"
              "os"
              "github.com/pb33f/libopenapi"
          )

          func main() {
              fmt.Println("üü¢ Iniciando valida√ß√£o OpenAPI...")

              if len(os.Args) < 2 {
                  fmt.Println("‚ùå Erro: Arquivo n√£o fornecido")
                  os.Exit(1)
              }

              file := os.Args[1]
              fmt.Println("üìÇ Arquivo recebido:", file)

              data, err := os.ReadFile(file)
              if err != nil {
                  fmt.Println("‚ùå Erro ao ler o arquivo:", err)
                  os.Exit(1)
              }

              fmt.Println("üìñ Arquivo lido com sucesso!")

              doc, err := libopenapi.NewDocument(data)
              if err != nil {
                  fmt.Println("‚ùå Erro ao carregar OpenAPI:", err)
                  os.Exit(1)
              }

              fmt.Println("‚úÖ OpenAPI carregado com sucesso!")

              info := doc.GetSpecInfo()
              if info == nil {
                  fmt.Println("‚ùå Erro: N√£o foi poss√≠vel obter informa√ß√µes da especifica√ß√£o OpenAPI")
                  os.Exit(1)
              }

              fmt.Println("‚úÖ OpenAPI validado com sucesso! Vers√£o:", info.Version)
          }' > validate.go

      - name: Instalar Depend√™ncias do Go
        run: |
          go mod init validator || true
          go mod tidy
          go get github.com/pb33f/libopenapi

      - name: Rodar PB33F e gerar relat√≥rio
        run: |
          if [ ! -f "swagger.yaml" ]; then
            echo "‚ùå Arquivo swagger.yaml n√£o encontrado!"
            exit 1
          fi

          echo "‚úÖ Arquivo encontrado: swagger.yaml"
          go run validate.go swagger.yaml > pb33f_report.txt

      - name: Instalar Spectral para valida√ß√£o OpenAPI
        run: npm install -g @stoplight/spectral-cli

      - name: Rodar Spectral e gerar relat√≥rio
        run: |
          if [ ! -f "swagger.yaml" ]; then
            echo "‚ùå Arquivo swagger.yaml n√£o encontrado!"
            exit 1
          fi

          echo "‚úÖ Arquivo encontrado: swagger.yaml"
          spectral lint "swagger.yaml" > spectral_report.txt

      - name: Instalar Vale CLI para valida√ß√£o de documenta√ß√£o
        run: |
          curl -fsSL https://install.vale.sh | sh
          vale --version

      - name: Rodar Vale CLI e gerar relat√≥rio
        run: |
          if [ ! -f "swagger.yaml" ]; then
            echo "‚ùå Arquivo swagger.yaml n√£o encontrado!"
            exit 1
          fi

          echo "‚úÖ Arquivo encontrado: swagger.yaml"
          vale "swagger.yaml" > vale_report.txt

      - name: Upload de Relat√≥rios de Valida√ß√£o no GitHub
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports
          path: |
            pb33f_report.txt
            spectral_report.txt
            vale_report.txt
