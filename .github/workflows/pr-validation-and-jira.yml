name: Validate PR and Create Jira Task

on:
  pull_request_target:  # Executa no reposit√≥rio original, permitindo acesso √†s secrets
    types:
      - opened
      - synchronize
      - reopened

jobs:
  validate-and-jira:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio original (para acessar secrets)
      - name: Checkout do reposit√≥rio original
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.base.repo.full_name }}  # C√≥digo base
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 0

      # 2Ô∏è‚É£ Checkout do c√≥digo atualizado do PR (fork)
      - name: Checkout do c√≥digo do PR (com subm√≥dulos)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}  # C√≥digo do PR do fork
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          submodules: true

      - name: Garantir que os Subm√≥dulos Est√£o Atualizados
        run: git submodule update --init --recursive

      - name: Verificar a Branch Atual (Confirma PR)
        run: git branch --show-current

      - name: Debug - Listar Arquivos na Pasta `rules`
        run: ls -R rules/

      - name: Debug - Exibir Caminho Completo do `swagger.yaml`
        run: |
          echo "Listando arquivos no diret√≥rio atual:"
          ls -lah
          echo "Procurando por swagger.yaml:"
          find $(pwd) -name "swagger.yaml"

      - name: Garantir Permiss√µes de Leitura no `swagger.yaml`
        run: chmod +r swagger.yaml || true

      - name: Instalar Depend√™ncias do Go
        run: |
          go mod init validator || true
          go mod tidy
          go get github.com/pb33f/libopenapi

      - name: Rodar PB33F e gerar relat√≥rio usando `rules/validator.go`
        run: |
          echo "üîç Buscando swagger.yaml..."
          if [ ! -f "swagger.yaml" ]; then
            echo "‚ùå Arquivo swagger.yaml n√£o encontrado na vers√£o do PR!"
            exit 1
          fi

          if [ ! -f "rules/validator.go" ]; then
            echo "‚ùå Arquivo validator.go n√£o encontrado em rules/!"
            exit 1
          fi

          echo "‚úÖ Arquivo encontrado: swagger.yaml"
          echo "üü¢ Executando valida√ß√£o PB33F..."

          go run rules/validator.go swagger.yaml > pb33f_report.txt 2>&1 || true

          echo "‚úÖ PB33F finalizado com sucesso!"

      - name: Instalar Spectral para valida√ß√£o OpenAPI
        run: npm install -g @stoplight/spectral-cli

      - name: Rodar Spectral e gerar relat√≥rio usando `rules/spectral_rules.yaml`
        run: |
          if [ ! -f "swagger.yaml" ]; then
            echo "‚ùå Arquivo swagger.yaml n√£o encontrado na vers√£o do PR!"
            exit 1
          fi

          if [ ! -f "rules/spectral_rules.yaml" ]; then
            echo "‚ùå Arquivo de regras do Spectral n√£o encontrado!"
            exit 1
          fi

          echo "‚úÖ Arquivo encontrado: swagger.yaml"
          spectral lint swagger.yaml --ruleset rules/spectral_rules.yaml > spectral_report.txt 2>&1 || true

          echo "‚úÖ Spectral finalizado com sucesso! Erros e warnings foram salvos no relat√≥rio."

      - name: Instalar Vale CLI para valida√ß√£o de documenta√ß√£o
        run: |
          echo "üîΩ Baixando e instalando Vale CLI..."
          VALE_VERSION=$(curl -s https://api.github.com/repos/errata-ai/vale/releases/latest | jq -r .tag_name)
          curl -L -o vale.tar.gz "https://github.com/errata-ai/vale/releases/download/$VALE_VERSION/vale_${VALE_VERSION:1}_Linux_64-bit.tar.gz"
          tar -xzf vale.tar.gz
          sudo mv vale /usr/local/bin/
          vale --version

      - name: Garantir que a pasta `rules/styles/` existe
        run: |
          if [ ! -d "rules/styles" ]; then
            echo "‚ö†Ô∏è Criando a pasta rules/styles/ para evitar erro no Vale CLI..."
            mkdir -p rules/styles
          fi

      - name: Criar Task no Jira
        id: create-jira-task
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT: ${{ secrets.JIRA_PROJECT }}
          JIRA_ISSUE_TYPE: "Task"
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          DESCRIPTION=$(echo "Revis√£o do PR: $PR_TITLE. Link do PR: $PR_URL Criado por: $PR_AUTHOR" | jq -R .)

          ISSUE_PAYLOAD=$(jq -n \
            --arg project "$JIRA_PROJECT" \
            --arg summary "Revis√£o do PR: $PR_TITLE" \
            --arg description "$DESCRIPTION" \
            --arg issuetype "$JIRA_ISSUE_TYPE" \
            '{
              fields: {
                project: { key: $project },
                summary: $summary,
                description: $description,
                issuetype: { name: $issuetype }
              }
            }')

          echo "$ISSUE_PAYLOAD"
          echo "üìù Criando issue no Jira..."
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
            -u "$JIRA_USER:$JIRA_API_TOKEN" \
            --data "$ISSUE_PAYLOAD" "$JIRA_URL/rest/api/2/issue/")

          ISSUE_KEY=$(echo "$RESPONSE" | jq -r '.key')

          if [[ "$ISSUE_KEY" == "null" ]]; then
            echo "‚ùå Erro ao criar issue no Jira!"
            echo "Resposta da API: $RESPONSE"
            exit 1
          fi

          echo "JIRA_ISSUE_KEY=$ISSUE_KEY" >> $GITHUB_ENV
          echo "‚úÖ Tarefa Jira criada: $ISSUE_KEY"

      - name: Anexar Relat√≥rios na Task Jira
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          ISSUE_KEY="${{ env.JIRA_ISSUE_KEY }}"

          if [ -z "$ISSUE_KEY" ] || [ "$ISSUE_KEY" == "null" ]; then
            echo "‚ùå Nenhuma issue Jira foi criada. Pulando upload de arquivos."
            exit 1
          fi

          echo "üìÇ Anexando relat√≥rios √† issue: $ISSUE_KEY"
          for FILE in pb33f_report.txt spectral_report.txt vale_report.txt; do
            if [[ -f "$FILE" ]]; then
              curl -X POST -H "X-Atlassian-Token: no-check" \
                -H "Content-Type: multipart/form-data" \
                -u "$JIRA_USER:$JIRA_API_TOKEN" \
                -F "file=@$FILE" "$JIRA_URL/rest/api/2/issue/$ISSUE_KEY/attachments"
            else
              echo "‚ö†Ô∏è Arquivo n√£o encontrado: $FILE"
            fi
          done
          echo "‚úÖ Todos os relat√≥rios foram anexados com sucesso!"
