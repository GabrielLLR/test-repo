name: Validate PR and Create Jira Task

on:
  pull_request:
    types:
      - opened
      - synchronize  # Executa tamb√©m quando o PR √© atualizado

jobs:
  validate-and-jira:
    if: github.repository != 'GabrielLLR/template-repo'  # EVITA EXECU√á√ÉO NO TEMPLATE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo do PR (com subm√≥dulos)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}  # Pega a vers√£o exata do PR
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Identidade do Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Exibir vers√£o do `swagger.yaml` para debug
        run: cat swagger.yaml || echo "‚ö†Ô∏è Arquivo n√£o encontrado!"

      - name: Corrigir URL do Subm√≥dulo para Autentica√ß√£o
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git submodule sync
          cd rules && git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/GabrielLLR/rules-repo.git || true

      - name: Atualizar Subm√≥dulos Baseados no PR
        run: |
          git submodule deinit -f rules || true
          rm -rf .git/modules/rules  # Remove vers√µes antigas
          git submodule update --init --recursive --force
          git add .gitmodules rules/
          git commit -m "Corre√ß√£o do subm√≥dulo rules" || true
          git push origin HEAD:${{ github.event.pull_request.head.ref }} || true

      - name: Criar Pasta de Scripts e Adicionar `validate.go`
        run: |
          mkdir -p scripts
          cat <<EOF > scripts/validate.go
          package main
          
          import (
              "fmt"
              "os"
              "github.com/pb33f/libopenapi"
          )
          
          func main() {
              if len(os.Args) < 2 {
                  fmt.Println("Uso: go run validate.go swagger.yaml")
                  return
              }

              file := os.Args[1]
              data, err := os.ReadFile(file)
              if err != nil {
                  fmt.Println("Erro ao ler o arquivo:", err)
                  os.Exit(1)
              }

              doc, err := libopenapi.NewDocument(data)
              if err != nil {
                  fmt.Println("Erro ao carregar OpenAPI:", err)
                  os.Exit(1)
              }

              fmt.Println("‚úÖ OpenAPI validado com sucesso!")
          }
          EOF

      - name: Instalar Depend√™ncias do Go
        run: |
          go mod init pb33f-validator || true
          go mod tidy

      - name: Rodar PB33F e gerar relat√≥rio
        run: |
          if [ -f "swagger.yaml" ]; then
            go run scripts/validate.go swagger.yaml > pb33f_report.txt
          else
            echo "‚ö†Ô∏è Arquivo swagger.yaml n√£o encontrado!"
            exit 1
          fi

      - name: Instalar Spectral para valida√ß√£o OpenAPI
        run: npm install -g @stoplight/spectral-cli

      - name: Rodar Spectral e gerar relat√≥rio
        run: |
          if [ -f "swagger.yaml" ]; then
            spectral lint swagger.yaml > spectral_report.txt
          else
            echo "‚ö†Ô∏è Arquivo swagger.yaml n√£o encontrado!"
            exit 1
          fi

      - name: Instalar Vale CLI para valida√ß√£o de documenta√ß√£o
        run: |
          curl -fsSL https://install.vale.sh | sh
          vale --version

      - name: Rodar Vale CLI e gerar relat√≥rio
        run: |
          if [ -f "swagger.yaml" ]; then
            vale swagger.yaml > vale_report.txt
          else
            echo "‚ö†Ô∏è Arquivo swagger.yaml n√£o encontrado!"
            exit 1
          fi

      - name: Upload de Relat√≥rios de Valida√ß√£o no GitHub
        uses: actions/upload-artifact@v4  # Atualizado para v4
        with:
          name: validation-reports
          path: |
            pb33f_report.txt
            spectral_report.txt
            vale_report.txt

      - name: Criar Task no Jira
        id: create-jira-task
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT: ${{ secrets.JIRA_PROJECT }}
          JIRA_ISSUE_TYPE: ${{ secrets.JIRA_ISSUE_TYPE }}
          JIRA_ISSUE_STATUS: ${{ secrets.JIRA_ISSUE_STATUS }}
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          DESCRIPTION="Este ticket foi gerado automaticamente para revisar o PR: $PR_TITLE. \n\nüîó Link do PR: $PR_URL \nüë§ Criado por: $PR_AUTHOR"

          ISSUE_PAYLOAD=$(cat <<EOF
          {
            "fields": {
              "project": { "key": "$JIRA_PROJECT" },
              "summary": "Revis√£o do PR: $PR_TITLE",
              "description": "$DESCRIPTION",
              "issuetype": { "name": "$JIRA_ISSUE_TYPE" }
            }
          }
          EOF
          )

          RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
            -u "$JIRA_USER:$JIRA_API_TOKEN" \
            --data "$ISSUE_PAYLOAD" "$JIRA_URL/rest/api/2/issue/")

          ISSUE_KEY=$(echo $RESPONSE | jq -r '.key')
          echo "JIRA_ISSUE_KEY=$ISSUE_KEY" >> $GITHUB_ENV
          echo "‚úÖ Tarefa Jira criada: $ISSUE_KEY"

      - name: Definir Status da Task no Jira
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_ISSUE_STATUS: ${{ secrets.JIRA_ISSUE_STATUS }}
        run: |
          ISSUE_KEY="${{ env.JIRA_ISSUE_KEY }}"
          
          TRANSITIONS=$(curl -s -X GET -H "Content-Type: application/json" \
            -u "$JIRA_USER:$JIRA_API_TOKEN" \
            "$JIRA_URL/rest/api/2/issue/$ISSUE_KEY/transitions")

          TRANSITION_ID=$(echo $TRANSITIONS | jq -r --arg STATUS "$JIRA_ISSUE_STATUS" '.transitions[] | select(.name == $STATUS) | .id')

          if [[ -z "$TRANSITION_ID" ]]; then
            echo "‚ö†Ô∏è Nenhuma transi√ß√£o encontrada para o status $JIRA_ISSUE_STATUS"
            exit 1
          fi

          curl -s -X POST -H "Content-Type: application/json" \
            -u "$JIRA_USER:$JIRA_API_TOKEN" \
            --data "{\"transition\": {\"id\": \"$TRANSITION_ID\"}}" \
            "$JIRA_URL/rest/api/2/issue/$ISSUE_KEY/transitions"

          echo "‚úÖ Status da tarefa atualizado para: $JIRA_ISSUE_STATUS"
