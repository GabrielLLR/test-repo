name: Validate PR and Create Jira Task

on:
  repository_dispatch:
    types: [trigger_main_workflow]

jobs:
  validate-and-jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do C√≥digo do Reposit√≥rio Oficial
        uses: actions/checkout@v4
        with:
          ref: main  # Sempre pega a vers√£o mais recente da main do reposit√≥rio oficial
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Obter C√≥digo do PR Correto
        run: |
          git fetch origin pull/${{ github.event.client_payload.pr_branch }}/head:pr_branch
          git checkout pr_branch

      - name: Verificar a Branch Atual (Confirma PR)
        run: git branch --show-current

      - name: Debug - Verificar Altera√ß√µes no PR
        run: git diff --name-only HEAD^ HEAD

      - name: Debug - Listar Arquivos no Diret√≥rio (confirma vers√£o do PR)
        run: ls -R

      - name: Debug - Exibir Caminho Completo do `swagger.yaml`
        run: |
          echo "Listando arquivos no diret√≥rio atual:"
          ls -lah
          echo "Procurando por swagger.yaml:"
          find $(pwd) -name "swagger.yaml"

      - name: Garantir Permiss√µes de Leitura no `swagger.yaml`
        run: chmod +r swagger.yaml || true

      - name: Criar `validate.go` na raiz com logs detalhados
        run: |
          echo 'package main

          import (
              "fmt"
              "os"
              "github.com/pb33f/libopenapi"
          )

          func main() {
              fmt.Println("üü¢ Iniciando valida√ß√£o OpenAPI... GABRIEL LINCOLN")

              if len(os.Args) < 2 {
                  fmt.Println("‚ùå Erro: Arquivo n√£o fornecido")
                  os.Exit(1)
              }

              file := os.Args[1]
              fmt.Println("üìÇ Arquivo recebido:", file)

              // Verifica se o arquivo existe
              _, err := os.Stat(file)
              if os.IsNotExist(err) {
                  fmt.Println("‚ùå Erro: O arquivo n√£o existe!")
                  os.Exit(1)
              }

              // Ler o arquivo
              fmt.Println("üìñ Tentando ler o arquivo...")
              data, err := os.ReadFile(file)
              if err != nil {
                  fmt.Println("‚ùå Erro ao ler o arquivo:", err)
                  os.Exit(1)
              }

              fmt.Println("üìñ Arquivo lido com sucesso!")

              // Carregar o OpenAPI Document
              fmt.Println("üì¶ Tentando carregar o documento OpenAPI...")
              doc, err := libopenapi.NewDocument(data)
              if err != nil {
                  fmt.Println("‚ùå Erro ao carregar OpenAPI:", err)
                  os.Exit(1)
              }

              fmt.Println("‚úÖ OpenAPI carregado com sucesso!")

              // Obt√©m informa√ß√µes do OpenAPI
              fmt.Println("üîç Obtendo informa√ß√µes do OpenAPI...")
              info := doc.GetSpecInfo()
              if info == nil {
                  fmt.Println("‚ùå Erro: N√£o foi poss√≠vel obter informa√ß√µes da especifica√ß√£o OpenAPI")
                  os.Exit(1)
              }

              fmt.Println("‚úÖ OpenAPI validado com sucesso! Vers√£o:", info.Version)
          }' > validate.go

      - name: Instalar Depend√™ncias do Go
        run: |
          go mod init validator || true
          go mod tidy
          go get github.com/pb33f/libopenapi

      - name: Rodar PB33F e gerar relat√≥rio com logs detalhados
        run: |
          echo "üîç Buscando swagger.yaml da vers√£o do PR..."
          if [ ! -f "swagger.yaml" ]; then
            echo "‚ùå Arquivo swagger.yaml n√£o encontrado na vers√£o do PR!"
            exit 1
          fi

          echo "‚úÖ Arquivo encontrado: swagger.yaml"
          echo "üü¢ Executando valida√ß√£o PB33F..."

          go run validate.go swagger.yaml > pb33f_report.txt 2>&1 || {
            echo "‚ùå Erro ao executar PB33F. Veja detalhes abaixo:"
            cat pb33f_report.txt
            exit 1
          }

          echo "‚úÖ PB33F finalizado com sucesso!"

      - name: Instalar Spectral para valida√ß√£o OpenAPI
        run: npm install -g @stoplight/spectral-cli

      - name: Rodar Spectral e gerar relat√≥rio (usando ruleset `spectral:oas`)
        run: |
          if [ ! -f "swagger.yaml" ]; then
            echo "‚ùå Arquivo swagger.yaml n√£o encontrado na vers√£o do PR!"
            exit 1
          fi

          echo "‚úÖ Arquivo encontrado: swagger.yaml"
          spectral lint swagger.yaml --ruleset spectral:oas > spectral_report.txt || {
            echo "‚ùå Erro ao executar Spectral. Veja detalhes abaixo:"
            cat spectral_report.txt
            exit 1
          }

          echo "‚úÖ Spectral finalizado com sucesso!"

      - name: Instalar Vale CLI para valida√ß√£o de documenta√ß√£o
        run: |
          curl -fsSL https://install.vale.sh | sh
          vale --version

      - name: Rodar Vale CLI e gerar relat√≥rio
        run: |
          if [ ! -f "swagger.yaml" ]; then
            echo "‚ùå Arquivo swagger.yaml n√£o encontrado na vers√£o do PR!"
            exit 1
          fi

          echo "‚úÖ Arquivo encontrado: swagger.yaml"
          vale "swagger.yaml" > vale_report.txt

      - name: Upload de Relat√≥rios de Valida√ß√£o no GitHub
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports
          path: |
            pb33f_report.txt
            spectral_report.txt
            vale_report.txt
