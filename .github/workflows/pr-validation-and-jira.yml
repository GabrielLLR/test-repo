name: Validate PR and Create Jira Task

on:
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  validate-and-jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do reposit√≥rio original
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.base.repo.full_name }}
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 0

      - name: Checkout do c√≥digo do PR (com subm√≥dulos)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          submodules: true

      - name: Garantir que os Subm√≥dulos Est√£o Atualizados
        run: git submodule update --init --recursive

      - name: Instalar Vale CLI para valida√ß√£o de documenta√ß√£o
        run: |
          echo "üîΩ Baixando e instalando Vale CLI..."
          VALE_VERSION=$(curl -s https://api.github.com/repos/errata-ai/vale/releases/latest | jq -r .tag_name)
          curl -L -o vale.tar.gz "https://github.com/errata-ai/vale/releases/download/$VALE_VERSION/vale_${VALE_VERSION:1}_Linux_64-bit.tar.gz"
          tar -xzf vale.tar.gz
          sudo mv vale /usr/local/bin/
          vale --version

      - name: Rodar Vale CLI e gerar relat√≥rio
        run: |
          if [ ! -f "swagger.yaml" ]; then
            echo "‚ùå Arquivo swagger.yaml n√£o encontrado!"
            exit 1
          fi

          if [ ! -f "rules/.vale.ini" ]; then
            echo "‚ùå Arquivo de configura√ß√£o .vale.ini n√£o encontrado!"
            exit 1
          fi

          vale --config rules/.vale.ini "swagger.yaml" > vale_report.txt || true
          cat vale_report.txt

      - name: Criar Task no Jira
        id: create-jira-task
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT: ${{ secrets.JIRA_PROJECT }}
          JIRA_ISSUE_TYPE: "Task"
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          DESCRIPTION=$(echo "Revis√£o do PR: $PR_TITLE. Link do PR: $PR_URL Criado por: $PR_AUTHOR" | jq -R .)

          ISSUE_PAYLOAD=$(jq -n \
            --arg project "$JIRA_PROJECT" \
            --arg summary "Revis√£o do PR: $PR_TITLE" \
            --arg description "$DESCRIPTION" \
            --arg issuetype "$JIRA_ISSUE_TYPE" \
            '{
              fields: {
                project: { key: $project },
                summary: $summary,
                description: $description,
                issuetype: { name: $issuetype }
              }
            }')

          RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
            -u "$JIRA_USER:$JIRA_API_TOKEN" \
            --data "$ISSUE_PAYLOAD" "$JIRA_URL/rest/api/2/issue/")

          ISSUE_KEY=$(echo "$RESPONSE" | jq -r '.key')

          if [[ "$ISSUE_KEY" == "null" ]]; then
            echo "‚ùå Erro ao criar issue no Jira!"
            echo "Resposta da API: $RESPONSE"
            exit 1
          fi

          echo "JIRA_ISSUE_KEY=$ISSUE_KEY" >> $GITHUB_ENV
          echo "‚úÖ Tarefa Jira criada: $ISSUE_KEY"

      - name: Mover Task para "EM ANDAMENTO"
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          ISSUE_KEY="${{ env.JIRA_ISSUE_KEY }}"

          if [ -z "$ISSUE_KEY" ] || [ "$ISSUE_KEY" == "null" ]; then
            echo "‚ùå Nenhuma issue Jira foi criada. Pulando mudan√ßa de status."
            exit 1
          fi

          echo "üîÑ Movendo a task para 'EM ANDAMENTO'..."
          
          TRANSITIONS=$(curl -s -X GET -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            "$JIRA_URL/rest/api/2/issue/$ISSUE_KEY/transitions")

          TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r '.transitions[] | select(.name=="Em Andamento") | .id')

          if [ -z "$TRANSITION_ID" ]; then
            echo "‚ùå N√£o foi poss√≠vel encontrar a transi√ß√£o para 'Em Andamento'."
            echo "üîç Resposta da API: $TRANSITIONS"
            exit 1
          fi

          curl -s -X POST -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{\"transition\": {\"id\": \"$TRANSITION_ID\"}}" \
            "$JIRA_URL/rest/api/2/issue/$ISSUE_KEY/transitions"

          echo "‚úÖ Task movida para 'EM ANDAMENTO'!"

      - name: Anexar Relat√≥rios na Task Jira
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          ISSUE_KEY="${{ env.JIRA_ISSUE_KEY }}"

          if [ -z "$ISSUE_KEY" ] || [ "$ISSUE_KEY" == "null" ]; then
            echo "‚ùå Nenhuma issue Jira foi criada. Pulando upload de arquivos."
            exit 1
          fi

          echo "üìÇ Anexando relat√≥rios √† issue: $ISSUE_KEY"
          for FILE in pb33f_report.txt spectral_report.txt vale_report.txt; do
            if [[ -f "$FILE" ]]; then
              curl -X POST -H "X-Atlassian-Token: no-check" \
                -H "Content-Type: multipart/form-data" \
                -u "$JIRA_USER:$JIRA_API_TOKEN" \
                -F "file=@$FILE" "$JIRA_URL/rest/api/2/issue/$ISSUE_KEY/attachments"
            else
              echo "‚ö†Ô∏è Arquivo n√£o encontrado: $FILE"
            fi
          done
          echo "‚úÖ Todos os relat√≥rios foram anexados com sucesso!"
