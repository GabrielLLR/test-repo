name: Validate PR and Create Jira Task

on:
  pull_request:
    types:
      - opened
      - synchronize  # Executa também quando o PR é atualizado

jobs:
  validate-and-jira:
    if: github.repository != 'GabrielLLR/template-repo'  # EVITA EXECUÇÃO NO TEMPLATE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código do PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}  # Pega a versão exata do PR
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Garantir que todos os arquivos do PR foram baixados
        run: git pull origin ${{ github.event.pull_request.head.ref }}

      - name: Debug - Listar Arquivos no Diretório
        run: ls -R

      - name: Debug - Exibir Caminho Completo do `swagger.yaml`
        run: |
          echo "Listando arquivos no diretório atual:"
          ls -lah
          echo "Procurando por swagger.yaml:"
          find $(pwd) -name "swagger.yaml"

      - name: Garantir Permissões de Leitura no `swagger.yaml`
        run: chmod +r swagger.yaml || true

      - name: Criar Pasta de Scripts e Adicionar `validate.go`
        run: |
          mkdir -p scripts
          echo 'package main

          import (
              "fmt"
              "os"
              "github.com/pb33f/libopenapi"
          )

          func main() {
              if len(os.Args) < 2 {
                  fmt.Println("Uso: go run validate.go <swagger.yaml>")
                  return
              }

              file := os.Args[1]
              data, err := os.ReadFile(file)
              if err != nil {
                  fmt.Println("Erro ao ler o arquivo:", err)
                  os.Exit(1)
              }

              doc, err := libopenapi.NewDocument(data)
              if err != nil {
                  fmt.Println("Erro ao carregar OpenAPI:", err)
                  os.Exit(1)
              }

              // Obtém a versão do OpenAPI corretamente
              info := doc.GetSpecInfo()
              if info == nil {
                  fmt.Println("Erro: Não foi possível obter informações da especificação OpenAPI")
                  os.Exit(1)
              }

              fmt.Println("✅ OpenAPI validado com sucesso! Versão:", info.Version)
          }' > scripts/validate.go

      - name: Instalar Dependências do Go
        run: |
          go mod init pb33f-validator || true
          go mod tidy

      - name: Rodar PB33F e gerar relatório
        run: |
          SWAGGER_FILE=$(find $(pwd) -name "swagger.yaml" | head -n 1)
          if [[ -z "$SWAGGER_FILE" || ! -f "$SWAGGER_FILE" ]]; then
            echo "❌ Arquivo swagger.yaml não encontrado!"
            exit 1
          fi

          echo "✅ Arquivo encontrado: $SWAGGER_FILE"
          go run scripts/validate.go "$SWAGGER_FILE" > pb33f_report.txt

      - name: Instalar Spectral para validação OpenAPI
        run: npm install -g @stoplight/spectral-cli

      - name: Rodar Spectral e gerar relatório
        run: |
          SWAGGER_FILE=$(find $(pwd) -name "swagger.yaml" | head -n 1)
          if [[ -z "$SWAGGER_FILE" || ! -f "$SWAGGER_FILE" ]]; then
            echo "❌ Arquivo swagger.yaml não encontrado!"
            exit 1
          fi

          echo "✅ Arquivo encontrado: $SWAGGER_FILE"
          spectral lint "$SWAGGER_FILE" > spectral_report.txt

      - name: Instalar Vale CLI para validação de documentação
        run: |
          curl -fsSL https://install.vale.sh | sh
          vale --version

      - name: Rodar Vale CLI e gerar relatório
        run: |
          SWAGGER_FILE=$(find $(pwd) -name "swagger.yaml" | head -n 1)
          if [[ -z "$SWAGGER_FILE" || ! -f "$SWAGGER_FILE" ]]; then
            echo "❌ Arquivo swagger.yaml não encontrado!"
            exit 1
          fi

          echo "✅ Arquivo encontrado: $SWAGGER_FILE"
          vale "$SWAGGER_FILE" > vale_report.txt

      - name: Upload de Relatórios de Validação no GitHub
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports
          path: |
            pb33f_report.txt
            spectral_report.txt
            vale_report.txt

